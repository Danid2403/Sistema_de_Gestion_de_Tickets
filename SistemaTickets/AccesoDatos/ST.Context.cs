//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccesoDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using Entidades;
    
    public partial class STEntities : DbContext
    {
        public STEntities()
            : base("name=STEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BitacoraTickets> BitacoraTickets { get; set; }
        public virtual DbSet<Seguimientos> Seguimientos { get; set; }
        public virtual DbSet<Tickets> Tickets { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
    
        public virtual int sp_ActualizarTicket(Nullable<int> id, string tipo, string descripcion, string categoria, string estado, byte[] evidencia, Nullable<int> soportistaAsignadoId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var categoriaParameter = categoria != null ?
                new ObjectParameter("Categoria", categoria) :
                new ObjectParameter("Categoria", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var evidenciaParameter = evidencia != null ?
                new ObjectParameter("Evidencia", evidencia) :
                new ObjectParameter("Evidencia", typeof(byte[]));
    
            var soportistaAsignadoIdParameter = soportistaAsignadoId.HasValue ?
                new ObjectParameter("SoportistaAsignadoId", soportistaAsignadoId) :
                new ObjectParameter("SoportistaAsignadoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizarTicket", idParameter, tipoParameter, descripcionParameter, categoriaParameter, estadoParameter, evidenciaParameter, soportistaAsignadoIdParameter);
        }
    
        public virtual int sp_ActualizarUsuario(Nullable<int> id, string nombre, string cedula, string departamento, string contacto, string correo, string tipo, string rol, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("Departamento", departamento) :
                new ObjectParameter("Departamento", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var rolParameter = rol != null ?
                new ObjectParameter("Rol", rol) :
                new ObjectParameter("Rol", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizarUsuario", idParameter, nombreParameter, cedulaParameter, departamentoParameter, contactoParameter, correoParameter, tipoParameter, rolParameter, activoParameter);
        }
    
        public virtual int sp_EliminarTicket(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminarTicket", idParameter);
        }
    
        public virtual int sp_EliminarUsuario(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminarUsuario", idParameter);
        }
    
        public virtual int sp_InsertarSeguimiento(Nullable<int> ticketId, string descripcion)
        {
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarSeguimiento", ticketIdParameter, descripcionParameter);
        }
    
        public virtual int sp_InsertarTicket(Nullable<int> usuarioId, string tipo, string descripcion, string categoria, string estado, byte[] evidencia, Nullable<int> soportistaAsignadoId)
        {
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("UsuarioId", usuarioId) :
                new ObjectParameter("UsuarioId", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var categoriaParameter = categoria != null ?
                new ObjectParameter("Categoria", categoria) :
                new ObjectParameter("Categoria", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var evidenciaParameter = evidencia != null ?
                new ObjectParameter("Evidencia", evidencia) :
                new ObjectParameter("Evidencia", typeof(byte[]));
    
            var soportistaAsignadoIdParameter = soportistaAsignadoId.HasValue ?
                new ObjectParameter("SoportistaAsignadoId", soportistaAsignadoId) :
                new ObjectParameter("SoportistaAsignadoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarTicket", usuarioIdParameter, tipoParameter, descripcionParameter, categoriaParameter, estadoParameter, evidenciaParameter, soportistaAsignadoIdParameter);
        }
    
        public virtual int sp_InsertarUsuario(string nombre, string cedula, string departamento, string contacto, string correo, string tipo, string rol, Nullable<bool> activo, string contrasena)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("Departamento", departamento) :
                new ObjectParameter("Departamento", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var rolParameter = rol != null ?
                new ObjectParameter("Rol", rol) :
                new ObjectParameter("Rol", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarUsuario", nombreParameter, cedulaParameter, departamentoParameter, contactoParameter, correoParameter, tipoParameter, rolParameter, activoParameter, contrasenaParameter);
        }
    
        public virtual ObjectResult<sp_ListarBitacora_Result> sp_ListarBitacora()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ListarBitacora_Result>("sp_ListarBitacora");
        }
    
        public virtual ObjectResult<sp_ListarSeguimientosPorTicket_Result> sp_ListarSeguimientosPorTicket(Nullable<int> ticketId)
        {
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ListarSeguimientosPorTicket_Result>("sp_ListarSeguimientosPorTicket", ticketIdParameter);
        }
    
        public virtual ObjectResult<sp_ListarTickets_Result> sp_ListarTickets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ListarTickets_Result>("sp_ListarTickets");
        }
    
        public virtual ObjectResult<sp_ListarUsuarios_Result> sp_ListarUsuarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ListarUsuarios_Result>("sp_ListarUsuarios");
        }
    
        public virtual ObjectResult<sp_LoginUsuario_Result> sp_LoginUsuario(string correo, string contrasena)
        {
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LoginUsuario_Result>("sp_LoginUsuario", correoParameter, contrasenaParameter);
        }
    
        public virtual int sp_MoverTicketABitacora(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MoverTicketABitacora", idParameter);
        }
    
        public virtual ObjectResult<sp_ObtenerTicketPorId_Result> sp_ObtenerTicketPorId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ObtenerTicketPorId_Result>("sp_ObtenerTicketPorId", idParameter);
        }
    
        public virtual ObjectResult<sp_ObtenerUsuarioPorId_Result> sp_ObtenerUsuarioPorId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ObtenerUsuarioPorId_Result>("sp_ObtenerUsuarioPorId", idParameter);
        }
    }
}
